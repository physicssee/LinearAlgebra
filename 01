####################
#01-01

#https://www.scaler.com/topics/matplotlib/arrow-in-matplotlib/
#https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.axis.html

v = np.array([[1, 2]])
print(v.shape)
v = np.array([1, 2])
print(v.shape)
# w = np.array([[5, -4]])
# print(v+w)

v = np.array([1,2])
w = np.array([4,-6])
vPlusW = v+w
vMiusW = v-w


print(v[0])

# now plot all three vectors
plt.figure(figsize=(6,6))
#
# a1 = plt.arrow(0,0,v[0],v[1],head_width=.3,width=.1,color='k',length_includes_head=True)
# a2 = plt.arrow(v[0],v[1],w[0],w[1],head_width=.3,width=.1,color=[.5,.5,.5],length_includes_head=True)
# a3 = plt.arrow(0,0,vPlusW[0],vPlusW[1],head_width=.3,width=.1,color=[.8,.8,.8],length_includes_head=True)

b1 = plt.arrow(0,0,v[0],v[1],head_width=.3,width=.1,color='k',length_includes_head=True)
b2 = plt.arrow(0, 0, w[0], w[1],head_width=.3,width=.1,color=[.5,.5,.5],length_includes_head=True)
b3 = plt.arrow(w[0], w[1], vMiusW[0], vMiusW[1],head_width=.3,width=.1,color=[.8,.8,.8],length_includes_head=True)



# # make the plot look a bit nicer
# plt.grid(linestyle='--', linewidth=.5)
# plt.axis('square')
# plt.axis([-6,6,-6,6])
# plt.legend([a1,a2,a3],['v','w','v+w'])
# plt.title('Vectors v W, and v + W')
# plt.savefig('Figure_01_02a.png',dpi=300) # write out the fig to a file
# plt.show()

plt.grid(linestyle='--', linewidth=.5)
plt.axis('square')
plt.axis([-6,6,-6,6])
plt.legend([b1, b2, b3],['v','w','v-w'])
plt.title('Vectors v W, and v - W')
plt.savefig('Figure_01_02a.png',dpi=300) # write out the fig to a file
plt.show()

##########################
###01-02

v = np.array([1,2,3,4,5])
v_dim = len(v)
print(v_dim)
v_mag = np.linalg.norm(v)
print(v_mag)

vNorm = 0
for i in range(v_dim) :
    vNorm_i = v[i] * v[i]
    vNorm += vNorm_i

vNorm=math.sqrt(vNorm)
print(vNorm)

# the function
def normOfVect(v):
  return np.sqrt(np.sum(v**2))

# test it on a unit-norm vector
w = np.array([0,0,1])
print( normOfVect(w) )

# non-unit-norm vector, and confirm using np.linalg.norm
w = np.array([1,2,3])
print( normOfVect(w),np.linalg.norm(w) )


##########################
###01-05

v = np.array([[1,2,3],[4,5,6]])
print(v)
i= 0
j =0
v_t = np.zeros((v.shape[1],v.shape[0]))

for i in range (v.shape[0]):
    for j in range (v.shape[1]):
       if i == j:
           v_t[i,j] = v[i,j]
       else :
           v_t[j, i] = v[i, j]
print(v_t)


##########################
###01-06
v = np.array([1,2,3,4,5])

norm = 0
for i in range(len(v)):
    norm += v[i]*v[i]

print(math.sqrt(norm))
v_mag = np.linalg.norm(v)
print(v_mag)
