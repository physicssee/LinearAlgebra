A = np.array([ [1,-1],[-2,2]])
B = np.array([ [1,-1],[-2,3]])
print(A)
print(A[0, :])
print("scipy.linalg.null_space(A)", scipy.linalg.null_space(A))   # 영공간 계산 단위 백터를 반환

print( scipy.linalg.null_space(B))

C = np.random.randn(3,3)
print(C)
print( scipy.linalg.null_space(C))
print( np.linalg.norm(C))
print(np.linalg.matrix_rank(C))
print(np.linalg.det(C))
print(np.linalg.det(A))
print(np.linalg.det(B))


Mrows = 10
Ncols = 10
A = np.random.randn(Mrows, Ncols)
print(A)
sum_a =0
for i in range(Mrows):
    for j in range(Ncols):
        a = A[i][j]
        a = a*a
        sum_a += a
F_norm = math.sqrt(sum_a)
F_norm2= np.linalg.norm(A)
print(F_norm)
print(F_norm2)



행렬에 대한 L2 노름과 프로베니우스 노름의 차이가 제곱 부분에서 근사값에 따라 값이 달라지는거지?



네, 맞습니다. 행렬에 대한 L2 노름과 프로베니우스 노름의 차이 중에서 주요한 부분은 제곱 부분에서 근사값에 따라 값이 달라진다는 점입니다.

L2 노름의 경우에는 각 원소를 제곱하고, 그 합의 제곱근을 취하는데, 이때 각 원소의 제곱이 큰 값으로 올라갈 수 있습니다. 특히 행렬을 벡터로 변환할 때, 행렬의 크기가 커짐에 따라 각 원소의 제곱 값이 매우 커질 수 있습니다. 그렇게 되면 노름의 값도 커지게 됩니다.

반면 프로베니우스 노름은 각 원소를 제곱하고, 그 합의 제곱근을 취하는데, 여기서는 행렬의 크기에 상관없이 각 원소의 제곱이 직접 더해지기 때문에 행렬의 크기가 노름 값에 직접적인 영향을 미치지 않습니다.

행렬의 크기가 커질수록 L2 노름은 계산 결과에서 수치적 불안정성을 보일 수 있습니다. 이러한 이유로, 행렬의 크기가 큰 경우에는 프로베니우스 노름이 더 안정적인 대안으로 사용될 수 있습니다.
